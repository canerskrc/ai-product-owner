# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12pLsJ77W2p8lY-DiwhMr4qfTBJWs3ylj
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import openai

# Initialize FastAPI app
app = FastAPI()

# OpenAI API key configuration
openai.api_key = "YOUR_OPENAI_API_KEY"

# Data models
class Requirement(BaseModel):
    id: int
    title: str
    description: str
    priority: Optional[int] = None  # Priority will be assigned by the AI

class Feedback(BaseModel):
    requirement_id: int
    feedback_text: str

# In-memory database
requirements_db: List[Requirement] = []
feedback_db: List[Feedback] = []

# Routes
@app.get("/requirements", response_model=List[Requirement])
def list_requirements():
    return requirements_db

@app.post("/requirements", response_model=Requirement)
def add_requirement(requirement: Requirement):
    # Simulate AI priority assignment
    try:
        ai_response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=f"Assign a priority (1-10) to the following requirement: {requirement.description}",
            max_tokens=10
        )
        priority = int(ai_response.choices[0].text.strip())
        requirement.priority = priority
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"AI Priority Assignment Failed: {e}")

    requirements_db.append(requirement)
    return requirement

@app.post("/feedback", response_model=Feedback)
def add_feedback(feedback: Feedback):
    # Ensure the requirement exists
    requirement = next((req for req in requirements_db if req.id == feedback.requirement_id), None)
    if not requirement:
        raise HTTPException(status_code=404, detail="Requirement not found")

    feedback_db.append(feedback)
    return feedback

@app.get("/feedback/{requirement_id}", response_model=List[Feedback])
def get_feedback(requirement_id: int):
    feedbacks = [fb for fb in feedback_db if fb.requirement_id == requirement_id]
    if not feedbacks:
        raise HTTPException(status_code=404, detail="No feedback found for this requirement")
    return feedbacks

# Health check
@app.get("/")
def health_check():
    return {"status": "API is running"}